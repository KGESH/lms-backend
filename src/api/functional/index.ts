/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
} from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

export * as v1 from "./v1";

/**
 * @controller AppController.ping
 * @path GET /
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function ping(connection: IConnection): Promise<ping.Output> {
  return !!connection.simulate
    ? ping.simulate(connection)
    : PlainFetcher.propagate(connection, {
        ...ping.METADATA,
        template: ping.METADATA.path,
        path: ping.path(),
      });
}
export namespace ping {
  export type Output = IPropagation<{
    200: "pong";
  }>;

  export const METADATA = {
    method: "GET",
    path: "/",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<"pong">> => typia.random<Primitive<"pong">>(g);
  export const simulate = (connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
