/**
 * @packageDocumentation
 * @module api.functional.v1.auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  Primitive,
  IPropagation,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { TypeGuardError } from "typia/lib/TypeGuardError";

import type { ExcludePassword } from "../../../../shared/types/omit-password";
import type { IErrorResponse } from "../../../../shared/types/response";
import type { LoginUserDto, SignUpUserDto } from "../../../../v1/auth/auth.dto";
import type { UserDto } from "../../../../v1/user/user.dto";

export * as kakao from "./kakao";
export * as role from "./role";

/**
 * @throws 400 invalid request
 * @throws 404 user not found
 * @controller AuthController.login
 * @path POST /v1/auth/login
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function login(
  connection: IConnection,
  body: login.Input,
): Promise<login.Output> {
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? login.simulate(connection, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...login.METADATA,
          template: login.METADATA.path,
          path: login.path(),
        },
        body,
      );
}
export namespace login {
  export type Input = Primitive<LoginUserDto>;
  export type Output = IPropagation<{
    201: ExcludePassword<UserDto>;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/auth/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/auth/login";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<ExcludePassword<UserDto>>> =>
    typia.random<Primitive<ExcludePassword<UserDto>>>(g);
  export const simulate = (
    connection: IConnection,
    body: login.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 409 user already exists
 * @controller AuthController.signup
 * @path POST /v1/auth/signup
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function signup(
  connection: IConnection,
  body: signup.Input,
): Promise<signup.Output> {
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? signup.simulate(connection, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...signup.METADATA,
          template: signup.METADATA.path,
          path: signup.path(),
        },
        body,
      );
}
export namespace signup {
  export type Input = Primitive<SignUpUserDto>;
  export type Output = IPropagation<{
    201: ExcludePassword<UserDto>;
    400: TypeGuardError<any>;
    409: IErrorResponse<409>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/auth/signup",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/auth/signup";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<ExcludePassword<UserDto>>> =>
    typia.random<Primitive<ExcludePassword<UserDto>>>(g);
  export const simulate = (
    connection: IConnection,
    body: signup.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
