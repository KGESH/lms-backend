/**
 * @packageDocumentation
 * @module api.functional.v1.product.course
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { TypeGuardError } from "typia/lib/TypeGuardError";

import type { Uuid } from "../../../../../shared/types/primitive";
import type {
  CourseProductDto,
  CourseProductCreateDto,
} from "../../../../../v1/product/course-product/course-product.dto";

/**
 * @throws 400 invalid request
 * @controller CourseProductController.getCourseProduct
 * @path GET /v1/product/course/:courseId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCourseProduct(
  connection: IConnection,
  courseId: Uuid,
): Promise<getCourseProduct.Output> {
  typia.assert<typeof courseId>(courseId);
  return !!connection.simulate
    ? getCourseProduct.simulate(connection, courseId)
    : PlainFetcher.propagate(connection, {
        ...getCourseProduct.METADATA,
        template: getCourseProduct.METADATA.path,
        path: getCourseProduct.path(courseId),
      });
}
export namespace getCourseProduct {
  export type Output = IPropagation<{
    200: null | CourseProductDto;
    400: TypeGuardError<any>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/product/course/:courseId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid) =>
    `/v1/product/course/${encodeURIComponent(courseId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | CourseProductDto>> =>
    typia.random<Primitive<null | CourseProductDto>>(g);
  export const simulate = (connection: IConnection, courseId: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @controller CourseProductController.createProductCourse
 * @path POST /v1/product/course/:courseId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createProductCourse(
  connection: IConnection,
  courseId: Uuid,
  body: createProductCourse.Input,
): Promise<createProductCourse.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createProductCourse.simulate(connection, courseId, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createProductCourse.METADATA,
          template: createProductCourse.METADATA.path,
          path: createProductCourse.path(courseId),
        },
        body,
      );
}
export namespace createProductCourse {
  export type Input = Primitive<CourseProductCreateDto>;
  export type Output = IPropagation<{
    201: CourseProductDto;
    400: TypeGuardError<any>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/product/course/:courseId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid) =>
    `/v1/product/course/${encodeURIComponent(courseId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CourseProductDto>> =>
    typia.random<Primitive<CourseProductDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    body: createProductCourse.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
