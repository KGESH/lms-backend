/**
 * @packageDocumentation
 * @module api.functional.v1.ui.component.carousel_review
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Uuid } from "../../../../../../shared/types/primitive";
import type {
  UiCarouselReviewWithItemsDto,
  CreateUiCarouselReviewDto,
} from "../../../../../../v1/ui/component/carousel/carousel-review/ui-carousel-review.dto";
import type { UiCarouselDto } from "../../../../../../v1/ui/component/carousel/ui-carousel.dto";

export * as item from "./item";

/**
 * @controller UiCarouselReviewController.getUiCarouselReview
 * @path GET /v1/ui/component/carousel-review/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUiCarouselReview(
  connection: IConnection,
  id: Uuid,
): Promise<getUiCarouselReview.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? getUiCarouselReview.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...getUiCarouselReview.METADATA,
        template: getUiCarouselReview.METADATA.path,
        path: getUiCarouselReview.path(id),
      });
}
export namespace getUiCarouselReview {
  export type Output = IPropagation<{
    200: null | UiCarouselReviewWithItemsDto;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/ui/component/carousel-review/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/ui/component/carousel-review/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | UiCarouselReviewWithItemsDto>> =>
    typia.random<Primitive<null | UiCarouselReviewWithItemsDto>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller UiCarouselReviewController.createUiCarouselReview
 * @path POST /v1/ui/component/carousel-review
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createUiCarouselReview(
  connection: IConnection,
  body: createUiCarouselReview.Input,
): Promise<createUiCarouselReview.Output> {
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createUiCarouselReview.simulate(connection, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createUiCarouselReview.METADATA,
          template: createUiCarouselReview.METADATA.path,
          path: createUiCarouselReview.path(),
        },
        body,
      );
}
export namespace createUiCarouselReview {
  export type Input = Primitive<CreateUiCarouselReviewDto>;
  export type Output = IPropagation<{
    201: UiCarouselDto<"carousel.review">;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/ui/component/carousel-review",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/ui/component/carousel-review";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<UiCarouselDto<"carousel.review">>> =>
    typia.random<Primitive<UiCarouselDto<"carousel.review">>>(g);
  export const simulate = (
    connection: IConnection,
    body: createUiCarouselReview.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
