/**
 * @packageDocumentation
 * @module api.functional.v1.ui.component.carousel_review.item
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  Primitive,
  IPropagation,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  CreateUiCarouselReviewItemDto,
  UiCarouselReviewItemDto,
  DeleteUiCarouselReviewItemsQuery,
} from "../../../../../../../v1/ui/component/carousel/carousel-review/ui-carousel-review.dto";

/**
 * @controller UiCarouselReviewController.createUiCarouselReviewItems
 * @path POST /v1/ui/component/carousel-review/item
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createUiCarouselReviewItems(
  connection: IConnection,
  body: createUiCarouselReviewItems.Input,
): Promise<createUiCarouselReviewItems.Output> {
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createUiCarouselReviewItems.simulate(connection, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createUiCarouselReviewItems.METADATA,
          template: createUiCarouselReviewItems.METADATA.path,
          path: createUiCarouselReviewItems.path(),
        },
        body,
      );
}
export namespace createUiCarouselReviewItems {
  export type Input = Primitive<Array<CreateUiCarouselReviewItemDto>>;
  export type Output = IPropagation<{
    201: Array<UiCarouselReviewItemDto>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/ui/component/carousel-review/item",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/ui/component/carousel-review/item";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<UiCarouselReviewItemDto>>> =>
    typia.random<Primitive<Array<UiCarouselReviewItemDto>>>(g);
  export const simulate = (
    connection: IConnection,
    body: createUiCarouselReviewItems.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller UiCarouselReviewController.deleteUiCarouselReviewItems
 * @path DELETE /v1/ui/component/carousel-review/item
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteUiCarouselReviewItems(
  connection: IConnection,
  query: deleteUiCarouselReviewItems.Query,
): Promise<deleteUiCarouselReviewItems.Output> {
  typia.assert<typeof query>(query);
  return !!connection.simulate
    ? deleteUiCarouselReviewItems.simulate(connection, query)
    : PlainFetcher.propagate(connection, {
        ...deleteUiCarouselReviewItems.METADATA,
        template: deleteUiCarouselReviewItems.METADATA.path,
        path: deleteUiCarouselReviewItems.path(query),
      });
}
export namespace deleteUiCarouselReviewItems {
  export type Query = Resolved<DeleteUiCarouselReviewItemsQuery>;
  export type Output = IPropagation<{
    200: Array<UiCarouselReviewItemDto>;
  }>;

  export const METADATA = {
    method: "DELETE",
    path: "/v1/ui/component/carousel-review/item",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: deleteUiCarouselReviewItems.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/v1/ui/component/carousel-review/item";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<UiCarouselReviewItemDto>>> =>
    typia.random<Primitive<Array<UiCarouselReviewItemDto>>>(g);
  export const simulate = (
    connection: IConnection,
    query: deleteUiCarouselReviewItems.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
