/**
 * @packageDocumentation
 * @module api.functional.v1.ui.component
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  Resolved,
  IPropagation,
  Primitive,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Uuid } from "../../../../../shared/types/primitive";
import type {
  IUiComponentQuery,
  IUiComponentBase,
} from "../../../../../v1/ui/component/ui-component.interface";

export * as repeat_timer from "./repeat_timer";
export * as carousel_review from "./carousel_review";

/**
 * @controller UiComponentController.getUiComponentsByPath
 * @path GET /v1/ui/component
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUiComponentsByPath(
  connection: IConnection,
  query: getUiComponentsByPath.Query,
): Promise<getUiComponentsByPath.Output> {
  typia.assert<typeof query>(query);
  return !!connection.simulate
    ? getUiComponentsByPath.simulate(connection, query)
    : PlainFetcher.propagate(connection, {
        ...getUiComponentsByPath.METADATA,
        template: getUiComponentsByPath.METADATA.path,
        path: getUiComponentsByPath.path(query),
      });
}
export namespace getUiComponentsByPath {
  export type Query = Resolved<IUiComponentQuery>;
  export type Output = IPropagation<{
    200: unknown;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/ui/component",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: getUiComponentsByPath.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/v1/ui/component";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<unknown>> => typia.random<Primitive<unknown>>(g);
  export const simulate = (
    connection: IConnection,
    query: getUiComponentsByPath.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller UiComponentController.deleteUiComponent
 * @path DELETE /v1/ui/component/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteUiComponent(
  connection: IConnection,
  id: Uuid,
): Promise<deleteUiComponent.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? deleteUiComponent.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...deleteUiComponent.METADATA,
        template: deleteUiComponent.METADATA.path,
        path: deleteUiComponent.path(id),
      });
}
export namespace deleteUiComponent {
  export type Output = IPropagation<{
    200: IUiComponentBase;
  }>;

  export const METADATA = {
    method: "DELETE",
    path: "/v1/ui/component/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/ui/component/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IUiComponentBase>> =>
    typia.random<Primitive<IUiComponentBase>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
