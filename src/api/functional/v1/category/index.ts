/**
 * @packageDocumentation
 * @module api.functional.v1.category
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { TypeGuardError } from "typia/lib/TypeGuardError";

import type { Uuid } from "../../../../shared/types/primitive";
import type { IErrorResponse } from "../../../../shared/types/response";
import type {
  CategoryWithChildrenDto,
  CategoryDto,
  CreateCategoryDto,
  UpdateCategoryDto,
} from "../../../../v1/category/category.dto";

/**
 * @controller CategoryController.getAllCategories
 * @path GET /v1/category
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getAllCategories(
  connection: IConnection,
): Promise<getAllCategories.Output> {
  return !!connection.simulate
    ? getAllCategories.simulate(connection)
    : PlainFetcher.propagate(connection, {
        ...getAllCategories.METADATA,
        template: getAllCategories.METADATA.path,
        path: getAllCategories.path(),
      });
}
export namespace getAllCategories {
  export type Output = IPropagation<{
    200: Array<CategoryWithChildrenDto>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/category",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/category";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<CategoryWithChildrenDto>>> =>
    typia.random<Primitive<Array<CategoryWithChildrenDto>>>(g);
  export const simulate = (connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @controller CategoryController.getCategory
 * @path GET /v1/category/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCategory(
  connection: IConnection,
  id: Uuid,
): Promise<getCategory.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? getCategory.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...getCategory.METADATA,
        template: getCategory.METADATA.path,
        path: getCategory.path(id),
      });
}
export namespace getCategory {
  export type Output = IPropagation<{
    200: null | CategoryDto;
    400: TypeGuardError<any>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/category/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/category/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | CategoryDto>> =>
    typia.random<Primitive<null | CategoryDto>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @controller CategoryController.createCategory
 * @path POST /v1/category
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createCategory(
  connection: IConnection,
  body: createCategory.Input,
): Promise<createCategory.Output> {
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createCategory.simulate(connection, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCategory.METADATA,
          template: createCategory.METADATA.path,
          path: createCategory.path(),
        },
        body,
      );
}
export namespace createCategory {
  export type Input = Primitive<CreateCategoryDto>;
  export type Output = IPropagation<{
    201: CategoryDto;
    400: TypeGuardError<any>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/category",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/category";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CategoryDto>> =>
    typia.random<Primitive<CategoryDto>>(g);
  export const simulate = (
    connection: IConnection,
    body: createCategory.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 category not found
 * @controller CategoryController.updateCategory
 * @path PATCH /v1/category/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateCategory(
  connection: IConnection,
  id: Uuid,
  body: updateCategory.Input,
): Promise<updateCategory.Output> {
  typia.assert<typeof id>(id);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? updateCategory.simulate(connection, id, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCategory.METADATA,
          template: updateCategory.METADATA.path,
          path: updateCategory.path(id),
        },
        body,
      );
}
export namespace updateCategory {
  export type Input = Primitive<UpdateCategoryDto>;
  export type Output = IPropagation<{
    200: CategoryDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "PATCH",
    path: "/v1/category/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/category/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CategoryDto>> =>
    typia.random<Primitive<CategoryDto>>(g);
  export const simulate = (
    connection: IConnection,
    id: Uuid,
    body: updateCategory.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 403 category has courses
 * @throws 404 category not found
 * @controller CategoryController.deleteCategory
 * @path DELETE /v1/category/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteCategory(
  connection: IConnection,
  id: Uuid,
): Promise<deleteCategory.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? deleteCategory.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...deleteCategory.METADATA,
        template: deleteCategory.METADATA.path,
        path: deleteCategory.path(id),
      });
}
export namespace deleteCategory {
  export type Output = IPropagation<{
    200: CategoryDto;
    400: TypeGuardError<any>;
    403: IErrorResponse<403>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "DELETE",
    path: "/v1/category/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/category/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CategoryDto>> =>
    typia.random<Primitive<CategoryDto>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
