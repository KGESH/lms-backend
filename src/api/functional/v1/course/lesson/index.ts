/**
 * @packageDocumentation
 * @module api.functional.v1.course.lesson
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Uuid } from "../../../../../shared/types/primitive";
import type { ILessonContent } from "../../../../../v1/course/chapter/lesson/lesson-content/lesson-content.interface";
import type { ILesson } from "../../../../../v1/course/chapter/lesson/lesson.interface";

/**
 * @controller LessonContentController.getLessonContents
 * @path GET /v1/course/:courseId/lesson/:lessonId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLessonContents(
  connection: IConnection,
  courseId: Uuid,
  lessonId: Uuid,
): Promise<getLessonContents.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof lessonId>(lessonId);
  return !!connection.simulate
    ? getLessonContents.simulate(connection, courseId, lessonId)
    : PlainFetcher.propagate(connection, {
        ...getLessonContents.METADATA,
        template: getLessonContents.METADATA.path,
        path: getLessonContents.path(courseId, lessonId),
      });
}
export namespace getLessonContents {
  export type Output = IPropagation<{
    200: Array<ILessonContent>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/lesson/:lessonId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, lessonId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<ILessonContent>>> =>
    typia.random<Primitive<Array<ILessonContent>>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    lessonId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, lessonId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("lessonId")(() => typia.assert(lessonId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller LessonContentController.getLessonContent
 * @path GET /v1/course/:courseId/lesson/:lessonId/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLessonContent(
  connection: IConnection,
  courseId: Uuid,
  lessonId: Uuid,
  lessonContentId: Uuid,
): Promise<getLessonContent.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof lessonId>(lessonId);
  typia.assert<typeof lessonContentId>(lessonContentId);
  return !!connection.simulate
    ? getLessonContent.simulate(connection, courseId, lessonId, lessonContentId)
    : PlainFetcher.propagate(connection, {
        ...getLessonContent.METADATA,
        template: getLessonContent.METADATA.path,
        path: getLessonContent.path(courseId, lessonId, lessonContentId),
      });
}
export namespace getLessonContent {
  export type Output = IPropagation<{
    200: null | ILessonContent;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/lesson/:lessonId/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, lessonId: Uuid, lessonContentId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}/${encodeURIComponent(lessonContentId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | ILessonContent>> =>
    typia.random<Primitive<null | ILessonContent>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    lessonId: Uuid,
    lessonContentId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, lessonId, lessonContentId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("lessonId")(() => typia.assert(lessonId));
      assert.param("lessonContentId")(() => typia.assert(lessonContentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller LessonController.getLessons
 * @path GET /v1/course/:courseId/lesson
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLessons(
  connection: IConnection,
  courseId: Uuid,
): Promise<getLessons.Output> {
  typia.assert<typeof courseId>(courseId);
  return !!connection.simulate
    ? getLessons.simulate(connection, courseId)
    : PlainFetcher.propagate(connection, {
        ...getLessons.METADATA,
        template: getLessons.METADATA.path,
        path: getLessons.path(courseId),
      });
}
export namespace getLessons {
  export type Output = IPropagation<{
    200: Array<ILesson>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/lesson",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/lesson`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<ILesson>>> =>
    typia.random<Primitive<Array<ILesson>>>(g);
  export const simulate = (connection: IConnection, courseId: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller LessonController.getLesson
 * @path GET /v1/course/:courseId/lesson/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLesson(
  connection: IConnection,
  courseId: Uuid,
  lessonId: Uuid,
): Promise<getLesson.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof lessonId>(lessonId);
  return !!connection.simulate
    ? getLesson.simulate(connection, courseId, lessonId)
    : PlainFetcher.propagate(connection, {
        ...getLesson.METADATA,
        template: getLesson.METADATA.path,
        path: getLesson.path(courseId, lessonId),
      });
}
export namespace getLesson {
  export type Output = IPropagation<{
    200: null | ILesson;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/lesson/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, lessonId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | ILesson>> =>
    typia.random<Primitive<null | ILesson>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    lessonId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, lessonId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("lessonId")(() => typia.assert(lessonId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
