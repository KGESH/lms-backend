/**
 * @packageDocumentation
 * @module api.functional.v1.course.chapter.lesson.lesson_content
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { TypeGuardError } from "typia/lib/TypeGuardError";

import type { Uuid } from "../../../../../../../shared/types/primitive";
import type { IErrorResponse } from "../../../../../../../shared/types/response";
import type {
  LessonContentDto,
  LessonContentCreateDto,
} from "../../../../../../../v1/course/chapter/lesson/lesson-content/lesson-content.dto";

/**
 * @controller LessonContentController.getLessonContents
 * @path GET /v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLessonContents(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  lessonId: Uuid,
): Promise<getLessonContents.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof lessonId>(lessonId);
  return !!connection.simulate
    ? getLessonContents.simulate(connection, courseId, chapterId, lessonId)
    : PlainFetcher.propagate(connection, {
        ...getLessonContents.METADATA,
        template: getLessonContents.METADATA.path,
        path: getLessonContents.path(courseId, chapterId, lessonId),
      });
}
export namespace getLessonContents {
  export type Output = IPropagation<{
    200: Array<LessonContentDto>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid, lessonId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}/lesson-content`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<LessonContentDto>>> =>
    typia.random<Primitive<Array<LessonContentDto>>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, lessonId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("lessonId")(() => typia.assert(lessonId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @controller LessonContentController.getLessonContent
 * @path GET /v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLessonContent(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  lessonId: Uuid,
  lessonContentId: Uuid,
): Promise<getLessonContent.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof lessonId>(lessonId);
  typia.assert<typeof lessonContentId>(lessonContentId);
  return !!connection.simulate
    ? getLessonContent.simulate(
        connection,
        courseId,
        chapterId,
        lessonId,
        lessonContentId,
      )
    : PlainFetcher.propagate(connection, {
        ...getLessonContent.METADATA,
        template: getLessonContent.METADATA.path,
        path: getLessonContent.path(
          courseId,
          chapterId,
          lessonId,
          lessonContentId,
        ),
      });
}
export namespace getLessonContent {
  export type Output = IPropagation<{
    200: null | LessonContentDto;
    400: TypeGuardError<any>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    lessonContentId: Uuid,
  ) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}/lesson-content/${encodeURIComponent(lessonContentId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | LessonContentDto>> =>
    typia.random<Primitive<null | LessonContentDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    lessonContentId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, lessonId, lessonContentId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("lessonId")(() => typia.assert(lessonId));
      assert.param("lessonContentId")(() => typia.assert(lessonContentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 lesson content not found
 * @controller LessonContentController.createLessonContent
 * @path POST /v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createLessonContent(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  lessonId: Uuid,
  body: createLessonContent.Input,
): Promise<createLessonContent.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof lessonId>(lessonId);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createLessonContent.simulate(
        connection,
        courseId,
        chapterId,
        lessonId,
        body,
      )
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createLessonContent.METADATA,
          template: createLessonContent.METADATA.path,
          path: createLessonContent.path(courseId, chapterId, lessonId),
        },
        body,
      );
}
export namespace createLessonContent {
  export type Input = Primitive<LessonContentCreateDto>;
  export type Output = IPropagation<{
    201: LessonContentDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid, lessonId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}/lesson-content`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<LessonContentDto>> =>
    typia.random<Primitive<LessonContentDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    body: createLessonContent.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, lessonId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("lessonId")(() => typia.assert(lessonId));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 lesson content not found
 * @controller LessonContentController.updateLessonContent
 * @path PATCH /v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateLessonContent(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  lessonId: Uuid,
  id: Uuid,
  body: updateLessonContent.Input,
): Promise<updateLessonContent.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof lessonId>(lessonId);
  typia.assert<typeof id>(id);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? updateLessonContent.simulate(
        connection,
        courseId,
        chapterId,
        lessonId,
        id,
        body,
      )
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateLessonContent.METADATA,
          template: updateLessonContent.METADATA.path,
          path: updateLessonContent.path(courseId, chapterId, lessonId, id),
        },
        body,
      );
}
export namespace updateLessonContent {
  export type Input = Primitive<Partial<LessonContentDto>>;
  export type Output = IPropagation<{
    200: LessonContentDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "PATCH",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    id: Uuid,
  ) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}/lesson-content/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<LessonContentDto>> =>
    typia.random<Primitive<LessonContentDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    id: Uuid,
    body: updateLessonContent.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, lessonId, id),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("lessonId")(() => typia.assert(lessonId));
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 lesson content not found
 * @controller LessonContentController.deleteLessonContent
 * @path DELETE /v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteLessonContent(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  lessonId: Uuid,
  id: Uuid,
): Promise<deleteLessonContent.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof lessonId>(lessonId);
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? deleteLessonContent.simulate(
        connection,
        courseId,
        chapterId,
        lessonId,
        id,
      )
    : PlainFetcher.propagate(connection, {
        ...deleteLessonContent.METADATA,
        template: deleteLessonContent.METADATA.path,
        path: deleteLessonContent.path(courseId, chapterId, lessonId, id),
      });
}
export namespace deleteLessonContent {
  export type Output = IPropagation<{
    200: LessonContentDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "DELETE",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:lessonId/lesson-content/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    id: Uuid,
  ) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}/lesson-content/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<LessonContentDto>> =>
    typia.random<Primitive<LessonContentDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
    id: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, lessonId, id),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("lessonId")(() => typia.assert(lessonId));
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
