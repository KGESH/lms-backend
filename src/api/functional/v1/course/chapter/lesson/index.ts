/**
 * @packageDocumentation
 * @module api.functional.v1.course.chapter.lesson
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { TypeGuardError } from "typia/lib/TypeGuardError";

import type { Uuid } from "../../../../../../shared/types/primitive";
import type { IErrorResponse } from "../../../../../../shared/types/response";
import type {
  LessonDto,
  LessonCreateDto,
} from "../../../../../../v1/course/chapter/lesson/lesson.dto";

export * as lesson_content from "./lesson_content";

/**
 * @controller LessonController.getLessons
 * @path GET /v1/course/:courseId/chapter/:chapterId/lesson
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLessons(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
): Promise<getLessons.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  return !!connection.simulate
    ? getLessons.simulate(connection, courseId, chapterId)
    : PlainFetcher.propagate(connection, {
        ...getLessons.METADATA,
        template: getLessons.METADATA.path,
        path: getLessons.path(courseId, chapterId),
      });
}
export namespace getLessons {
  export type Output = IPropagation<{
    200: Array<LessonDto>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<LessonDto>>> =>
    typia.random<Primitive<Array<LessonDto>>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @controller LessonController.getLesson
 * @path GET /v1/course/:courseId/chapter/:chapterId/lesson/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getLesson(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  lessonId: Uuid,
): Promise<getLesson.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof lessonId>(lessonId);
  return !!connection.simulate
    ? getLesson.simulate(connection, courseId, chapterId, lessonId)
    : PlainFetcher.propagate(connection, {
        ...getLesson.METADATA,
        template: getLesson.METADATA.path,
        path: getLesson.path(courseId, chapterId, lessonId),
      });
}
export namespace getLesson {
  export type Output = IPropagation<{
    200: null | LessonDto;
    400: TypeGuardError<any>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid, lessonId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(lessonId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | LessonDto>> =>
    typia.random<Primitive<null | LessonDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    lessonId: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, lessonId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("lessonId")(() => typia.assert(lessonId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 chapter not found
 * @controller LessonController.createLesson
 * @path POST /v1/course/:courseId/chapter/:chapterId/lesson
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createLesson(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  body: createLesson.Input,
): Promise<createLesson.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createLesson.simulate(connection, courseId, chapterId, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createLesson.METADATA,
          template: createLesson.METADATA.path,
          path: createLesson.path(courseId, chapterId),
        },
        body,
      );
}
export namespace createLesson {
  export type Input = Primitive<LessonCreateDto>;
  export type Output = IPropagation<{
    201: LessonDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<LessonDto>> => typia.random<Primitive<LessonDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    body: createLesson.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 lesson not found
 * @controller LessonController.updateLesson
 * @path PATCH /v1/course/:courseId/chapter/:chapterId/lesson/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateLesson(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  id: Uuid,
  body: updateLesson.Input,
): Promise<updateLesson.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof id>(id);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? updateLesson.simulate(connection, courseId, chapterId, id, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateLesson.METADATA,
          template: updateLesson.METADATA.path,
          path: updateLesson.path(courseId, chapterId, id),
        },
        body,
      );
}
export namespace updateLesson {
  export type Input = Primitive<Partial<LessonDto>>;
  export type Output = IPropagation<{
    200: LessonDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "PATCH",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid, id: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<LessonDto>> => typia.random<Primitive<LessonDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    id: Uuid,
    body: updateLesson.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, id),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @throws 400 invalid request
 * @throws 404 lesson not found
 * @controller LessonController.deleteLesson
 * @path DELETE /v1/course/:courseId/chapter/:chapterId/lesson/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteLesson(
  connection: IConnection,
  courseId: Uuid,
  chapterId: Uuid,
  id: Uuid,
): Promise<deleteLesson.Output> {
  typia.assert<typeof courseId>(courseId);
  typia.assert<typeof chapterId>(chapterId);
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? deleteLesson.simulate(connection, courseId, chapterId, id)
    : PlainFetcher.propagate(connection, {
        ...deleteLesson.METADATA,
        template: deleteLesson.METADATA.path,
        path: deleteLesson.path(courseId, chapterId, id),
      });
}
export namespace deleteLesson {
  export type Output = IPropagation<{
    200: LessonDto;
    400: TypeGuardError<any>;
    404: IErrorResponse<404>;
  }>;

  export const METADATA = {
    method: "DELETE",
    path: "/v1/course/:courseId/chapter/:chapterId/lesson/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (courseId: Uuid, chapterId: Uuid, id: Uuid) =>
    `/v1/course/${encodeURIComponent(courseId ?? "null")}/chapter/${encodeURIComponent(chapterId ?? "null")}/lesson/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<LessonDto>> => typia.random<Primitive<LessonDto>>(g);
  export const simulate = (
    connection: IConnection,
    courseId: Uuid,
    chapterId: Uuid,
    id: Uuid,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(courseId, chapterId, id),
      contentType: "application/json",
    });
    try {
      assert.param("courseId")(() => typia.assert(courseId));
      assert.param("chapterId")(() => typia.assert(chapterId));
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
