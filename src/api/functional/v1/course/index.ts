/**
 * @packageDocumentation
 * @module api.functional.v1.course
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  IPropagation,
  Primitive,
  Resolved,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Uuid } from "../../../../shared/types/primitive";
import type { CourseWithRelationsDto } from "../../../../v1/course/course-with-relations.dto";
import type {
  CourseDto,
  CourseCreateDto,
} from "../../../../v1/course/course.dto";

export * as chapter from "./chapter";

/**
 * @controller CourseController.getCourses
 * @path GET /v1/course
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCourses(
  connection: IConnection,
): Promise<getCourses.Output> {
  return !!connection.simulate
    ? getCourses.simulate(connection)
    : PlainFetcher.propagate(connection, {
        ...getCourses.METADATA,
        template: getCourses.METADATA.path,
        path: getCourses.path(),
      });
}
export namespace getCourses {
  export type Output = IPropagation<{
    200: Array<CourseDto>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/course";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<CourseDto>>> =>
    typia.random<Primitive<Array<CourseDto>>>(g);
  export const simulate = (connection: IConnection): Output => {
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller CourseController.getCourse
 * @path GET /v1/course/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCourse(
  connection: IConnection,
  id: Uuid,
): Promise<getCourse.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? getCourse.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...getCourse.METADATA,
        template: getCourse.METADATA.path,
        path: getCourse.path(id),
      });
}
export namespace getCourse {
  export type Output = IPropagation<{
    200: null | CourseWithRelationsDto;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/course/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/course/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | CourseWithRelationsDto>> =>
    typia.random<Primitive<null | CourseWithRelationsDto>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller CourseController.createCourse
 * @path POST /v1/course
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createCourse(
  connection: IConnection,
  body: createCourse.Input,
): Promise<createCourse.Output> {
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? createCourse.simulate(connection, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCourse.METADATA,
          template: createCourse.METADATA.path,
          path: createCourse.path(),
        },
        body,
      );
}
export namespace createCourse {
  export type Input = Primitive<CourseCreateDto>;
  export type Output = IPropagation<{
    201: CourseDto;
  }>;

  export const METADATA = {
    method: "POST",
    path: "/v1/course",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/course";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CourseDto>> => typia.random<Primitive<CourseDto>>(g);
  export const simulate = (
    connection: IConnection,
    body: createCourse.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 201,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller CourseController.updateCourse
 * @path PATCH /v1/course/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateCourse(
  connection: IConnection,
  id: Uuid,
  body: updateCourse.Input,
): Promise<updateCourse.Output> {
  typia.assert<typeof id>(id);
  typia.assert<typeof body>(body);
  return !!connection.simulate
    ? updateCourse.simulate(connection, id, body)
    : PlainFetcher.propagate(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateCourse.METADATA,
          template: updateCourse.METADATA.path,
          path: updateCourse.path(id),
        },
        body,
      );
}
export namespace updateCourse {
  export type Input = Primitive<Partial<Partial<CourseCreateDto>>>;
  export type Output = IPropagation<{
    200: CourseDto;
  }>;

  export const METADATA = {
    method: "PATCH",
    path: "/v1/course/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/course/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CourseDto>> => typia.random<Primitive<CourseDto>>(g);
  export const simulate = (
    connection: IConnection,
    id: Uuid,
    body: updateCourse.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller CourseController.deleteCourse
 * @path DELETE /v1/course/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteCourse(
  connection: IConnection,
  id: Uuid,
): Promise<deleteCourse.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? deleteCourse.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...deleteCourse.METADATA,
        template: deleteCourse.METADATA.path,
        path: deleteCourse.path(id),
      });
}
export namespace deleteCourse {
  export type Output = IPropagation<{
    200: CourseDto;
  }>;

  export const METADATA = {
    method: "DELETE",
    path: "/v1/course/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/course/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<CourseDto>> => typia.random<Primitive<CourseDto>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
