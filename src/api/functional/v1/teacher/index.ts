/**
 * @packageDocumentation
 * @module api.functional.v1.teacher
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type {
  IConnection,
  Resolved,
  IPropagation,
  Primitive,
  HttpError,
} from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { PaginationDto } from "../../../../core/pagination.dto";
import type { Uuid } from "../../../../shared/types/primitive";
import type { TeacherDto } from "../../../../v1/teacher/teacher.dto";

/**
 * @controller TeacherController.getTeachers
 * @path GET /v1/teacher
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getTeachers(
  connection: IConnection,
  query: getTeachers.Query,
): Promise<getTeachers.Output> {
  typia.assert<typeof query>(query);
  return !!connection.simulate
    ? getTeachers.simulate(connection, query)
    : PlainFetcher.propagate(connection, {
        ...getTeachers.METADATA,
        template: getTeachers.METADATA.path,
        path: getTeachers.path(query),
      });
}
export namespace getTeachers {
  export type Query = Resolved<PaginationDto>;
  export type Output = IPropagation<{
    200: Array<TeacherDto>;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/teacher",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: getTeachers.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/v1/teacher";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<TeacherDto>>> =>
    typia.random<Primitive<Array<TeacherDto>>>(g);
  export const simulate = (
    connection: IConnection,
    query: getTeachers.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(query),
      contentType: "application/json",
    });
    try {
      assert.query(() => typia.assert(query));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}

/**
 * @controller TeacherController.getTeacher
 * @path GET /v1/teacher/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getTeacher(
  connection: IConnection,
  id: Uuid,
): Promise<getTeacher.Output> {
  typia.assert<typeof id>(id);
  return !!connection.simulate
    ? getTeacher.simulate(connection, id)
    : PlainFetcher.propagate(connection, {
        ...getTeacher.METADATA,
        template: getTeacher.METADATA.path,
        path: getTeacher.path(id),
      });
}
export namespace getTeacher {
  export type Output = IPropagation<{
    200: null | TeacherDto;
  }>;

  export const METADATA = {
    method: "GET",
    path: "/v1/teacher/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/teacher/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<null | TeacherDto>> =>
    typia.random<Primitive<null | TeacherDto>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return {
      success: true,
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
      data: random(
        "object" === typeof connection.simulate && null !== connection.simulate
          ? connection.simulate
          : undefined,
      ),
    };
  };
}
