/**
 * @packageDocumentation
 * @module api.functional.v1.auth.refresh_token
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IResponse } from "../../../../../../src/shared/types/response";
import type { RefreshTokenDto } from "../../../../../../src/v1/auth/auth.dto";
import type { IAuthTokens } from "../../../../../../src/v1/auth/auth.interface";

/**
 * @controller AuthController.refreshToken
 * @path POST /v1/auth/refresh-token
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function refreshToken(
  connection: IConnection,
  body: refreshToken.Input,
): Promise<refreshToken.Output> {
  return !!connection.simulate
    ? refreshToken.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...refreshToken.METADATA,
          template: refreshToken.METADATA.path,
          path: refreshToken.path(),
        },
        body,
      );
}
export namespace refreshToken {
  export type Input = Primitive<RefreshTokenDto>;
  export type Output = Primitive<IResponse<Pick<IAuthTokens, "accessToken">>>;

  export const METADATA = {
    method: "POST",
    path: "/v1/auth/refresh-token",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/v1/auth/refresh-token";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IResponse<Pick<IAuthTokens, "accessToken">>>> =>
    typia.random<Primitive<IResponse<Pick<IAuthTokens, "accessToken">>>>(g);
  export const simulate = (
    connection: IConnection,
    body: refreshToken.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(body));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
