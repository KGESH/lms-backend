/**
 * @packageDocumentation
 * @module api.functional.v1.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Resolved, Primitive } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IPagination } from "../../../../../src/shared/types/pagination";
import type { Uuid } from "../../../../../src/shared/types/primitive";
import type { IResponse } from "../../../../../src/shared/types/response";
import type { IUserWithoutPassword } from "../../../../../src/v1/user/user.interface";

/**
 * @controller UserController.getUsers
 * @path GET /v1/user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUsers(
  connection: IConnection,
  query: getUsers.Query,
): Promise<getUsers.Output> {
  return !!connection.simulate
    ? getUsers.simulate(connection, query)
    : PlainFetcher.fetch(connection, {
        ...getUsers.METADATA,
        template: getUsers.METADATA.path,
        path: getUsers.path(query),
      });
}
export namespace getUsers {
  export type Query = Resolved<Partial<IPagination>>;
  export type Output = Primitive<IResponse<Array<IUserWithoutPassword>>>;

  export const METADATA = {
    method: "GET",
    path: "/v1/user",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: getUsers.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/v1/user";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IResponse<Array<IUserWithoutPassword>>>> =>
    typia.random<Primitive<IResponse<Array<IUserWithoutPassword>>>>(g);
  export const simulate = (
    connection: IConnection,
    query: getUsers.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(query),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(query));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * @controller UserController.getUser
 * @path GET /v1/user/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUser(
  connection: IConnection,
  id: Uuid,
): Promise<getUser.Output> {
  return !!connection.simulate
    ? getUser.simulate(connection, id)
    : PlainFetcher.fetch(connection, {
        ...getUser.METADATA,
        template: getUser.METADATA.path,
        path: getUser.path(id),
      });
}
export namespace getUser {
  export type Output = Primitive<IResponse<null | IUserWithoutPassword>>;

  export const METADATA = {
    method: "GET",
    path: "/v1/user/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: Uuid) =>
    `/v1/user/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IResponse<null | IUserWithoutPassword>>> =>
    typia.random<Primitive<IResponse<null | IUserWithoutPassword>>>(g);
  export const simulate = (connection: IConnection, id: Uuid): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
