/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

export * as v1 from "./v1";

/**
 * @controller AppController.getHello
 * @path GET /
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getHello(
  connection: IConnection,
): Promise<getHello.Output> {
  return !!connection.simulate
    ? getHello.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getHello.METADATA,
        template: getHello.METADATA.path,
        path: getHello.path(),
      });
}
export namespace getHello {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "GET",
    path: "/",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<string>> => typia.random<Primitive<string>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
